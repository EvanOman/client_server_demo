/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/tour/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new tour */
        post: operations["createTour"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/departure/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new departure */
        post: operations["createDeparture"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/departure/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search departures */
        post: operations["searchDepartures"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/booking/hold": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create or refresh a seat hold */
        post: operations["createHold"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/booking/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm a booking from a hold */
        post: operations["confirmBooking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/booking/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancel a booking */
        post: operations["cancelBooking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/booking/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get booking details */
        post: operations["getBooking"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/waitlist/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Join departure waitlist */
        post: operations["joinWaitlist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/waitlist/notify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Process waitlist notifications (internal) */
        post: operations["notifyWaitlist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/inventory/adjust": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adjust departure capacity */
        post: operations["adjustInventory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/health/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Health check */
        post: operations["healthPing"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Money: {
            /** @description Amount in minor units (e.g., cents) */
            amount: number;
            /** @description ISO 4217 currency code */
            currency: string;
        };
        Problem: {
            /**
             * Format: uri
             * @description Problem type URI
             */
            type?: string;
            /** @description Short human-readable summary */
            title: string;
            /** @description HTTP status code */
            status: number;
            /** @description Human-readable explanation */
            detail?: string;
            /** @description URI reference for this occurrence */
            instance?: string;
            /** @description Application-specific error code */
            code?: string;
            /** @description Whether the operation can be retried */
            retryable?: boolean;
            /** @description Trace ID for debugging */
            trace_id?: string;
            /** @description Validation errors */
            violations?: {
                /** @description JSON path to the invalid field */
                path?: string;
                /** @description Validation error message */
                message?: string;
            }[];
        };
        Tour: {
            /** @description Unique tour ID */
            id: string;
            /** @description Tour name */
            name: string;
            /** @description URL-friendly slug */
            slug: string;
            /** @description Tour description */
            description: string;
        };
        Departure: {
            /** @description Unique departure ID */
            id: string;
            /** @description Associated tour ID */
            tour_id: string;
            /**
             * Format: date-time
             * @description Departure start time (ISO 8601)
             */
            starts_at: string;
            /** @description Total capacity */
            capacity_total: number;
            /** @description Available capacity */
            capacity_available: number;
            price: components["schemas"]["Money"];
        };
        Hold: {
            /** @description Unique hold ID */
            id: string;
            /** @description Associated departure ID */
            departure_id: string;
            /** @description Number of seats held */
            seats: number;
            /** @description Customer reference */
            customer_ref: string;
            /**
             * @description Hold status
             * @enum {string}
             */
            status: "ACTIVE" | "EXPIRED" | "CONFIRMED" | "CANCELED";
            /**
             * Format: date-time
             * @description Hold expiration time (ISO 8601)
             */
            expires_at: string;
        };
        Booking: {
            /** @description Unique booking ID */
            id: string;
            /** @description Associated hold ID */
            hold_id: string;
            /** @description Booking confirmation code */
            code: string;
            /** @description Number of seats booked */
            seats: number;
            /** @description Customer reference */
            customer_ref: string;
            /**
             * @description Booking status
             * @enum {string}
             */
            status: "CONFIRMED" | "CANCELED";
            /**
             * Format: date-time
             * @description Booking creation time (ISO 8601)
             */
            created_at: string;
        };
        WaitlistEntry: {
            /** @description Unique waitlist entry ID */
            id: string;
            /** @description Associated departure ID */
            departure_id: string;
            /** @description Customer reference */
            customer_ref: string;
            /**
             * Format: date-time
             * @description Entry creation time (ISO 8601)
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Notification time (ISO 8601)
             */
            notified_at?: string;
        };
        InventoryAdjustment: {
            /** @description Unique adjustment ID */
            id: string;
            /** @description Associated departure ID */
            departure_id: string;
            /** @description Capacity change (positive or negative) */
            delta: number;
            /** @description Reason for adjustment */
            reason: string;
            /**
             * Format: date-time
             * @description Adjustment time (ISO 8601)
             */
            created_at: string;
            /** @description User who made the adjustment */
            actor: string;
        };
        CreateTourRequest: {
            /** @description Tour name */
            name: string;
            /** @description URL-friendly slug */
            slug: string;
            /** @description Tour description */
            description: string;
        };
        CreateDepartureRequest: {
            /** @description Associated tour ID */
            tour_id: string;
            /**
             * Format: date-time
             * @description Departure start time (ISO 8601)
             */
            starts_at: string;
            /** @description Total capacity */
            capacity_total: number;
            price: components["schemas"]["Money"];
        };
        SearchDeparturesRequest: {
            /** @description Filter by tour ID */
            tour_id?: string;
            /**
             * Format: date
             * @description Start date filter
             */
            date_from?: string;
            /**
             * Format: date
             * @description End date filter
             */
            date_to?: string;
            /**
             * @description Only show departures with availability
             * @default false
             */
            available_only: boolean;
            /** @description Pagination cursor */
            cursor?: string;
            /**
             * @description Results per page
             * @default 20
             */
            limit: number;
        };
        SearchDeparturesResponse: {
            items: components["schemas"]["Departure"][];
            /** @description Cursor for next page */
            next_cursor?: string;
        };
        CreateHoldRequest: {
            /** @description Departure to hold seats for */
            departure_id: string;
            /** @description Number of seats to hold */
            seats: number;
            /** @description Customer reference */
            customer_ref: string;
            /**
             * @description Hold duration in seconds
             * @default 600
             */
            ttl_seconds: number;
        };
        ConfirmBookingRequest: {
            /** @description Hold to confirm */
            hold_id: string;
        };
        CancelBookingRequest: {
            /** @description Booking to cancel */
            booking_id: string;
        };
        GetBookingRequest: {
            /** @description Booking to retrieve */
            booking_id: string;
        };
        JoinWaitlistRequest: {
            /** @description Departure to join waitlist for */
            departure_id: string;
            /** @description Customer reference */
            customer_ref: string;
        };
        NotifyWaitlistRequest: {
            /** @description Departure to process waitlist for */
            departure_id: string;
        };
        NotifyWaitlistResponse: {
            /** @description Number of waitlist entries processed */
            processed_count: number;
            holds_created?: components["schemas"]["Hold"][];
        };
        AdjustInventoryRequest: {
            /** @description Departure to adjust */
            departure_id: string;
            /** @description Capacity change (positive or negative) */
            delta: number;
            /** @description Reason for adjustment */
            reason: string;
        };
        HealthResponse: {
            /**
             * @description Service status
             * @enum {string}
             */
            status: "healthy";
            /**
             * Format: date-time
             * @description Current server time (ISO 8601)
             */
            timestamp: string;
            /** @description API version */
            version?: string;
        };
    };
    responses: {
        /** @description Unexpected error */
        DefaultError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["Problem"];
            };
        };
    };
    parameters: {
        /** @description Unique key for idempotent operations */
        IdempotencyKey: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createTour: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTourRequest"];
            };
        };
        responses: {
            /** @description Tour created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tour"];
                };
            };
            /** @description Tour already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createDeparture: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDepartureRequest"];
            };
        };
        responses: {
            /** @description Departure created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Departure"];
                };
            };
            /** @description Tour not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    searchDepartures: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SearchDeparturesRequest"];
            };
        };
        responses: {
            /** @description Departures found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SearchDeparturesResponse"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    createHold: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key for idempotent operations */
                "Idempotency-Key": components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateHoldRequest"];
            };
        };
        responses: {
            /** @description Hold created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Hold"];
                };
            };
            /** @description Conflict (capacity full or hold exists) */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            /** @description Idempotency key mismatch */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    confirmBooking: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key for idempotent operations */
                "Idempotency-Key": components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmBookingRequest"];
            };
        };
        responses: {
            /** @description Booking confirmed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"];
                };
            };
            /** @description Hold expired or already confirmed */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            /** @description Idempotency key mismatch */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    cancelBooking: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key for idempotent operations */
                "Idempotency-Key": components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelBookingRequest"];
            };
        };
        responses: {
            /** @description Booking cancelled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"];
                };
            };
            /** @description Booking not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            /** @description Booking already cancelled */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            /** @description Idempotency key mismatch */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    getBooking: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetBookingRequest"];
            };
        };
        responses: {
            /** @description Booking found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Booking"];
                };
            };
            /** @description Booking not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    joinWaitlist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JoinWaitlistRequest"];
            };
        };
        responses: {
            /** @description Joined waitlist successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WaitlistEntry"];
                };
            };
            /** @description Departure not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    notifyWaitlist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotifyWaitlistRequest"];
            };
        };
        responses: {
            /** @description Waitlist processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotifyWaitlistResponse"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    adjustInventory: {
        parameters: {
            query?: never;
            header: {
                /** @description Unique key for idempotent operations */
                "Idempotency-Key": components["parameters"]["IdempotencyKey"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AdjustInventoryRequest"];
            };
        };
        responses: {
            /** @description Inventory adjusted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InventoryAdjustment"];
                };
            };
            /** @description Capacity conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            /** @description Idempotency key mismatch */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["Problem"];
                };
            };
            default: components["responses"]["DefaultError"];
        };
    };
    healthPing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Service is healthy */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
        };
    };
}
